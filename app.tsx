wallet-rep-dapp/
├── public/
│   └── index.html
├── src/
│   ├── App.tsx
│   ├── index.tsx
│   ├── react-app-env.d.ts
│   ├── styles.css
│   └── types.ts
├── .env.example
├── .gitignore
├── package.json
├── README.md
└── tsconfig.json

// public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Wallet reputation scanner dApp" />
  <title>Wallet Rep Scanner</title>
</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>
</html>

// src/index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./styles.css";

const root = ReactDOM.createRoot(document.getElementById("root")!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// src/styles.css
body {
  margin: 0;
  background-color: #fafafa;
  font-family: Arial, sans-serif;
}

// src/types.ts
export interface WalletReputation {
  address: string;
  balanceEth: number;
  transactionCount: number;
  nftCount: number;
  defiInteractions: number;
  reputationScore: number;
}

// src/App.tsx
import React, { useState } from "react";
import { ethers } from "ethers";
import Web3Modal from "web3modal";
import axios from "axios";
import { WalletReputation } from "./types";

const App: React.FC = () => {
  const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);
  const [walletAddress, setWalletAddress] = useState<string>("");
  const [reputation, setReputation] = useState<WalletReputation | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  const connectWallet = async () => {
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    setProvider(provider);

    const signer = provider.getSigner();
    const address = await signer.getAddress();
    setWalletAddress(address);
  };

  const fetchReputation = async (address: string) => {
    setLoading(true);
    try {
      const ethProvider = new ethers.providers.JsonRpcProvider(`https://eth-mainnet.alchemyapi.io/v2/${process.env.REACT_APP_ALCHEMY_KEY}`);
      const balance = await ethProvider.getBalance(address);
      const txCount = await ethProvider.getTransactionCount(address);

      const balanceEth = parseFloat(ethers.utils.formatEther(balance));

      // Placeholder logic
      const nftCount = Math.floor(Math.random() * 10); // Replace with Alchemy NFT API
      const defiInteractions = Math.floor(Math.random() * 5); // Replace with real logic from Etherscan

      const score = (balanceEth + txCount / 100 + nftCount + defiInteractions) / 4;

      const data: WalletReputation = {
        address,
        balanceEth,
        transactionCount: txCount,
        nftCount,
        defiInteractions,
        reputationScore: score,
      };

      setReputation(data);
    } catch (err) {
      console.error("Error fetching reputation:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: 20 }}>
      <h1>Wallet Reputation Scanner</h1>
      <button onClick={connectWallet}>Connect Wallet</button>
      <br /><br />
      <input
        type="text"
        placeholder="Enter wallet address"
        value={walletAddress}
        onChange={(e) => setWalletAddress(e.target.value)}
        style={{ width: "300px" }}
      />
      <button onClick={() => fetchReputation(walletAddress)} disabled={loading}>
        {loading ? "Scanning..." : "Scan"}
      </button>

      {reputation && (
        <div style={{ marginTop: 20 }}>
          <h3>Reputation Score: {reputation.reputationScore.toFixed(2)}</h3>
          <ul>
            <li><strong>ETH Balance:</strong> {reputation.balanceEth} ETH</li>
            <li><strong>Transaction Count:</strong> {reputation.transactionCount}</li>
            <li><strong>NFTs Held:</strong> {reputation.nftCount}</li>
            <li><strong>DeFi Interactions:</strong> {reputation.defiInteractions}</li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default App;

// .env.example
REACT_APP_ALCHEMY_KEY=your_alchemy_api_key
REACT_APP_ETHERSCAN_KEY=your_etherscan_api_key

// .gitignore
node_modules
.env
build
dist

// package.json
// (Auto-generated by Create React App - run `npm init react-app wallet-rep-dapp --template typescript`)

// tsconfig.json
// (Default TypeScript config from Create React App)

// README.md
# Wallet Reputation Scanner

A simple Ethereum dApp that scans wallet addresses and scores them based on:
- ETH balance
- Transaction count
- NFT holdings (Alchemy API)
- DeFi interactions (Etherscan API)

## Features
- Connect your wallet (MetaMask, WalletConnect)
- Scan any Ethereum address
- View on-chain metrics and get a "reputation score"

## Tech Stack
- React + TypeScript
- Ethers.js + Web3Modal
- Alchemy + Etherscan APIs

## Setup
```bash
git clone https://github.com/YOUR_USERNAME/wallet-rep-dapp.git
cd wallet-rep-dapp
npm install
```

Create a `.env` file:
```bash
cp .env.example .env
```
Fill in your Alchemy and Etherscan API keys.

## Run locally
```bash
npm start
```

## License
MIT
